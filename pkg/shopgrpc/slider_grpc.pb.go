// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: proto/slider.proto

package shopgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SliderServiceClient is the client API for SliderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SliderServiceClient interface {
	CreateSlider(ctx context.Context, in *SliderRequest, opts ...grpc.CallOption) (*SliderRequestResponse, error)
	GetSlider(ctx context.Context, in *SliderRequest, opts ...grpc.CallOption) (*SliderResponse, error)
}

type sliderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSliderServiceClient(cc grpc.ClientConnInterface) SliderServiceClient {
	return &sliderServiceClient{cc}
}

func (c *sliderServiceClient) CreateSlider(ctx context.Context, in *SliderRequest, opts ...grpc.CallOption) (*SliderRequestResponse, error) {
	out := new(SliderRequestResponse)
	err := c.cc.Invoke(ctx, "/shopgrpc.SliderService/CreateSlider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliderServiceClient) GetSlider(ctx context.Context, in *SliderRequest, opts ...grpc.CallOption) (*SliderResponse, error) {
	out := new(SliderResponse)
	err := c.cc.Invoke(ctx, "/shopgrpc.SliderService/GetSlider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SliderServiceServer is the server API for SliderService service.
// All implementations must embed UnimplementedSliderServiceServer
// for forward compatibility
type SliderServiceServer interface {
	CreateSlider(context.Context, *SliderRequest) (*SliderRequestResponse, error)
	GetSlider(context.Context, *SliderRequest) (*SliderResponse, error)
	mustEmbedUnimplementedSliderServiceServer()
}

// UnimplementedSliderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSliderServiceServer struct {
}

func (UnimplementedSliderServiceServer) CreateSlider(context.Context, *SliderRequest) (*SliderRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlider not implemented")
}
func (UnimplementedSliderServiceServer) GetSlider(context.Context, *SliderRequest) (*SliderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlider not implemented")
}
func (UnimplementedSliderServiceServer) mustEmbedUnimplementedSliderServiceServer() {}

// UnsafeSliderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SliderServiceServer will
// result in compilation errors.
type UnsafeSliderServiceServer interface {
	mustEmbedUnimplementedSliderServiceServer()
}

func RegisterSliderServiceServer(s grpc.ServiceRegistrar, srv SliderServiceServer) {
	s.RegisterService(&SliderService_ServiceDesc, srv)
}

func _SliderService_CreateSlider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SliderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliderServiceServer).CreateSlider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopgrpc.SliderService/CreateSlider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliderServiceServer).CreateSlider(ctx, req.(*SliderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliderService_GetSlider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SliderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliderServiceServer).GetSlider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shopgrpc.SliderService/GetSlider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliderServiceServer).GetSlider(ctx, req.(*SliderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SliderService_ServiceDesc is the grpc.ServiceDesc for SliderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SliderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopgrpc.SliderService",
	HandlerType: (*SliderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSlider",
			Handler:    _SliderService_CreateSlider_Handler,
		},
		{
			MethodName: "GetSlider",
			Handler:    _SliderService_GetSlider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/slider.proto",
}
